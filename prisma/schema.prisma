generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  password       String
  role           UserRole        @default(USER)
  avatar         String?
  phone          String?
  campus         String?
  tags           String[]
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quizAttempts   QuizAttempt[]
  quizUsers      QuizUser[]
  createdQuizzes Quiz[]          @relation("QuizCreator")
  questionGroups QuestionGroup[]
  createdActivities Activity[]    @relation("ActivityCreator")
  activityParticipants ActivityParticipant[]

  @@map("users")
}

model QuestionGroup {
  id          String     @id @default(cuid())
  name        String
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  questions   Question[]
  creatorId   String
  creator     User       @relation(fields: [creatorId], references: [id])

  @@map("question_groups")
}

model Question {
  id            String          @id @default(cuid())
  title         String
  content       String
  type          QuestionType
  options       String
  correctAnswer String
  explanation   String?
  difficulty    DifficultyLevel @default(MEDIUM)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  quizQuestions QuizQuestion[]
  activityQuestions ActivityQuestion[]
  activityAnswers ActivityAnswer[]
  groupId       String
  group         QuestionGroup?  @relation(fields: [groupId], references: [id])

  @@map("questions")
}

model Quiz {
  id                 String          @id @default(cuid())
  title              String
  description        String?
  timeLimit          Int?
  difficulty         DifficultyLevel @default(MEDIUM)
  status             QuizStatus      @default(ACTIVE)
  negativeMarking    Boolean         @default(false)
  negativePoints     Float?
  randomOrder        Boolean         @default(false)
  maxAttempts        Int?
  showAnswers        Boolean         @default(false)
  startTime          DateTime?
  endTime            DateTime?
  creatorId          String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  quizAttempts       QuizAttempt[]
  quizQuestions      QuizQuestion[]
  quizUsers          QuizUser[]
  creator            User            @relation("QuizCreator", fields: [creatorId], references: [id])
  checkAnswerEnabled Boolean         @default(false)

  @@map("quizzes")
}

model Activity {
  id           String        @id @default(cuid())
  title        String
  description  String?
  accessKey    String        @unique
  status       ActivityStatus @default(DRAFT)
  startTime    DateTime?
  endTime      DateTime?
  creatorId    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  questions    ActivityQuestion[]
  participants ActivityParticipant[]
  sessions     ActivitySession[]
  creator      User          @relation("ActivityCreator", fields: [creatorId], references: [id])

  @@map("activities")
}

model ActivityQuestion {
  id           String      @id @default(cuid())
  activityId   String
  questionId   String
  order        Int
  points       Float       @default(1.0)
  createdAt    DateTime    @default(now())
  question     Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  activity     Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([activityId, questionId])
  @@map("activity_questions")
}

model ActivityParticipant {
  id         String      @id @default(cuid())
  activityId String
  userId     String
  joinedAt   DateTime    @default(now())
  score      Float?
  rank       Int?
  activity   Activity    @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
  @@map("activity_participants")
}

model ActivitySession {
  id           String           @id @default(cuid())
  activityId   String
  currentQuestion Int?
  status       SessionStatus    @default(WAITING)
  startTime    DateTime?
  endTime      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  answers      ActivityAnswer[]
  activity     Activity         @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("activity_sessions")
}

model ActivityAnswer {
  id           String              @id @default(cuid())
  sessionId    String
  questionId   String
  userAnswer   String
  isCorrect    Boolean?
  pointsEarned Float?
  timeSpent    Int?
  answeredAt   DateTime            @default(now())
  session      ActivitySession     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question     Question            @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, questionId])
  @@map("activity_answers")
}

model QuizQuestion {
  id         String   @id @default(cuid())
  quizId     String
  questionId String
  order      Int
  points     Float    @default(1.0)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionId])
  @@map("quiz_questions")
}

model QuizUser {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([quizId, userId])
  @@map("quiz_users")
}

model QuizAttempt {
  id          String        @id @default(cuid())
  userId      String
  quizId      String
  status      AttemptStatus @default(NOT_STARTED)
  score       Float?
  totalPoints Float?
  timeTaken   Int?
  startedAt   DateTime?
  submittedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  answers     QuizAnswer[]
  quiz        Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model QuizAnswer {
  id           String      @id @default(cuid())
  attemptId    String
  questionId   String
  userAnswer   String
  isCorrect    Boolean?
  pointsEarned Float?
  timeSpent    Int?
  createdAt    DateTime    @default(now())
  attempt      QuizAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@unique([attemptId, questionId])
  @@map("quiz_answers")
}

model Settings {
  id                String   @id @default(cuid())
  siteTitle         String   @default("QuizMaster")
  siteDescription   String   @default("Take quizzes and test your knowledge")
  maintenanceMode   Boolean  @default(false)
  allowRegistration Boolean  @default(true)
  enableGithubAuth  Boolean  @default(false)
  accentColor       String   @default("blue")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("settings")
}

enum UserRole {
  USER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  MULTI_SELECT
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum QuizStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum ActivityStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum SessionStatus {
  WAITING
  PLAYING
  PAUSED
  FINISHED
}

enum AttemptStatus {
  NOT_STARTED
  IN_PROGRESS
  SUBMITTED
}
